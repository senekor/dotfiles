[user]
name = "Remo Senekowitsch"
email = "{{ .op.email }}"

[git]
push-branch-prefix = "{{ .chezmoi.username }}/"

[ui]
default-command = ["log", "--template", "my_log_compact_comfortable"]
default-description = "\n"
diff-editor = ":builtin"
diff.tool = ["difft", "--color=always", "--syntax-highlight", "off", "$left", "$right"]

[aliases]
b = ["branch"]
c = ["commit"]
d = ["describe"]
e = ["edit"]
f = ["git", "fetch"]
g = ["log", "--template", "builtin_log_oneline", "--revisions", "all()"]
l = ["log", "--template", "builtin_log_oneline", "--revisions", "ancestors(@)"]
ll =["log", "--template", "builtin_log_detailed","--revisions", "all()"]
p = ["git", "push"]
r = ["rebase"]
s = ["show"]

[templates]
log = "builtin_log_comfortable"
op_log = 'builtin_op_log_comfortable'
log_node = "my_log_node"

# https://github.com/martinvonz/jj/blob/main/cli/src/config/colors.toml
[colors]
"change_id" = "cyan"
"working_copy change_id" = "bright cyan"

# branches: brown
"branch" = "#c3813b"
"branches" = "#c3813b"
"local_branches" = "#c3813b"
"remote_branches" = "#c3813b"
"working_copy branch" = "#c3813b"
"working_copy branches" = "#c3813b"
"working_copy local_branches" = "#c3813b"
"working_copy remote_branches" = "#c3813b"

"tag" = "yellow"
"tags" = "yellow"
"working_copy tag" = "bright yellow"
"working_copy tags" = "bright yellow"

"node working_copy" = { fg = "yellow" }
"node immutable" = { fg = "white" }
"node working_copy immutable" = { fg = "yellow" }

# https://github.com/martinvonz/jj/blob/main/cli/src/config/templates.toml
[template-aliases]

'format_short_change_id(id)' = 'id.shortest(5)'

my_log_compact_comfortable = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    separate(" ",
      format_short_change_id_with_hidden_and_divergent_info(self),
      if(divergent, format_short_commit_id(commit_id)),
      if(conflict, label("conflict", "conflict")),
      if(author.email(), author.username(), email_placeholder),
      branches,
      tags,
      working_copies,
      if(empty, label("empty", "(empty)")),
      if(description,
        description.first_line(),
        label(if(empty, "empty"), description_placeholder),
      ),
    ),
  )
)
'''

my_log_node = '''
coalesce(
  if(!self, label("elided", ":")),
  label(
    separate(" ",
      if(current_working_copy, "working_copy"),
      if(immutable, "immutable"),
      if(conflict, "conflict"),
    ),
    coalesce(
      if(current_working_copy, "â—‰"),
      if(immutable, "â€¢"),
      if(conflict, "ðŸ—™"),
      "â—‰",
    )
  )
)
'''
