#:schema https://jj-vcs.github.io/jj/latest/config-schema.json
# chezmoi:template:left-delimiter="# {{"

[user]
name = "Remo Senekowitsch"
email = "remo@buenzli.dev" # default, overruled by domain-specific setting

[git]
push-bookmark-prefix = "senekor/" # default, overruled by domain-specific setting
push-new-bookmarks = true
private-commits = "private()"
write-change-id-header = true
# {{- if not .isServer }}
sign-on-push = true
# {{- end }}

# domain-specific overrides, make sure to update git config as well!
[[--scope]]
--when.repositories = ["~/repos/buenzli"]
git.push-bookmark-prefix = "remo/"
[[--scope]]
--when.repositories = ["~/repos/zhaw"]
user.email = "senk@zhaw.ch"
git.push-bookmark-prefix = "senk/"

[ui]
default-command = ["log", "--template", "custom_log_oneline"]
diff-editor = ":builtin" # suppress hint about this config option
conflict-marker-style = "snapshot"

[aliases]
b  = ["bookmark"]
c  = ["commit"]
ci = ["commit", "--interactive"]
cm = ["util", "exec", "--", "bash", "-c", """set -eo pipefail ; echo "$@" | jj describe --stdin ; jj new""", ""]
d  = ["describe"]
dv = ["--config=templates.draft_commit_description=commit_description_verbose", "describe"]
e  = ["edit"]
f  = ["git", "fetch", "--all-remotes"]
l  = ["log", "--template", "custom_log_oneline", "--revisions", "ancestors(@)"]
g  = ["log", "--template", "custom_log_oneline", "--revisions", "all()"]
p  = ["git", "push"]
pa = ["git", "push", "--all"]
pt = ["git", "push", "--tracked"]
pc = ["git", "push", "--change"]
pb = ["git", "push", "--bookmark"]
pd = ["git", "push", "--deleted"]
r  = ["rebase"]
rd = ["rebase", "--destination"]
s  = ["show"]

tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]
init = ["git", "init", "--colocate"]
yolo = ["config", "set", "--repo", "revset-aliases.'immutable_heads()'", "root()"]
yolont = ["config", "unset", "--repo", "revset-aliases.'immutable_heads()'"]
track-mine = ["bookmark", "track", "regex:(remo|senekor|senk)/.*@.*"]
track-all = ["bookmark", "track", "glob:*@*"] # for personal repos where I don't use the prefix

# [scripts]
clone = ["util", "exec", "--", "# {{ .chezmoi.homeDir }}/.config/jj/scripts/clone.nu"]
tnp = ["util", "exec", "--", "bash", "-c", "set -e ; jj tug ; jj git push --revisions @-"] # tug'n'push
cob = ["util", "exec", "--", "bash", "-c", """
#!/usr/bin/env bash
set -euo pipefail

if test -z ${1+x}
then
    echo "You need to specify a bookmark onto which to place the commit!"
    echo "\nUsage: $0 <BOOKMARK_NAME> [COMMIT_ARGS]...\n"
    exit 1
fi
target_bookmark="$1" ; shift

jj commit "$@"

change_id="$(jj --ignore-working-copy log --revisions @- --no-graph --template change_id)"

jj --ignore-working-copy rebase --revisions "$change_id" --insert-after "$target_bookmark"
jj --ignore-working-copy bookmark move "$target_bookmark" --to "$change_id"
""", "jj cob"]
bgi   = [
  "util", "exec", "--",
  "cargo", "run", "--quiet",
  "--manifest-path", "# {{ .chezmoi.homeDir }}/.config/jj/scripts/bgi/Cargo.toml",
  "--",
]
play  = ["bgi", "jj-play"]

[revsets]
log = "present(@) | ancestors(trunk()..mine(), 2) | trunk()"

[signing]
behavior = "drop"
backend = "ssh"
key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM2geN1p04/RFi6LPt8hoCvTfEKhR1RH6iuH9N9wKpD7"
backends.ssh.program = "/opt/1Password/op-ssh-sign"
backends.ssh.allowed-signers = "~/.config/allowed_signers"

[templates]
op_log = 'builtin_op_log_comfortable'

[revset-aliases]
'private()' = "description(glob:'PRIV*')"
'immutable_heads()' = "builtin_immutable_heads() | remote_bookmarks('', remote='upstream')"

# https://github.com/martinvonz/jj/blob/main/cli/src/config/templates.toml
[template-aliases]

'format_short_change_id(id)' = 'id.shortest(6)'

custom_log_oneline = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    separate(" ",
      format_short_change_id_with_hidden_and_divergent_info(self),
      if(divergent, format_short_commit_id(commit_id)),
      if(conflict, label("conflict", "conflict")),
      bookmarks,
      tags,
      working_copies,
      if(empty, label("empty", "(empty)")),
      if(description,
        description.first_line(),
        label(if(empty, "empty"), description_placeholder),
      ),
    ),
  )
)
'''

commit_description_verbose = '''
concat(
  description,
  "\n\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''

[colors]
"tag" = { fg = "magenta", underline = true }
"tags" = { fg = "magenta", underline = true }
"working_copy tag" = { fg = "bright magenta", underline = true }
"working_copy tags" = { fg = "bright magenta", underline = true }
