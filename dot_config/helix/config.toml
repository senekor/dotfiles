theme = "kanagawa_deluxe" # modus_operandi

[editor]
scrolloff = 256                  # big number -> cursor always centered
gutters = ["diff"]
bufferline = "always"
mouse = false
true-color = true
auto-pairs = false
end-of-line-diagnostics = "hint"

# TODO: Once there is a stable helix release with inline diagnostics,
# check if the defaults are good, i.e. this section can be removed.
[editor.inline-diagnostics]
cursor-line = "hint" # error, warning, info, hint

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "block"

[editor.file-picker]
hidden = false

[editor.soft-wrap]
enable = true

#### keybinds
#
# across all modes:
#
# Ctrl-s conflicts with custom zellij keybind for "scratchpad".
# Remap everything from Ctrl-s (save) to Ctrl-h (history).
# Ctrl-h technically has conflicts with vim-motion "h" (left).
# Left arrow is always an alternative I prefer anyway.
# Maybe update these if default helix keymap changes in future releases.

[keys.normal]
esc = ":update"                            # save on escape
C-h = "save_selection"                     # "save" -> "history"
j = "flip_selections"                      # "juxtapose"
J = "select_all_siblings"                  # "juggle"
l = ":reflow"
L = ":reload-all"
h = "jump_backward"                        # move through jumplist ("history")
H = "jump_forward"                         # move through jumplist ("history")
q = ":buffer-close"                        # "quit" buffer
Q = ":buffer-close!"                       # force "quit" buffer
k = "replay_macro"
K = "record_macro"
X = "select_line_above"                    # instead of extend_to_line_bounds
S-left = "select_prev_sibling"             # shift-arrows to traverse syntax-tree
S-right = "select_next_sibling"            # shift-arrows to traverse syntax-tree
S-up = "expand_selection"                  # shift-arrows to traverse syntax-tree
S-down = "shrink_selection"                # shift-arrows to traverse syntax-tree
"{" = "rotate_selection_contents_backward"
"}" = "rotate_selection_contents_forward"
del = "delete_selection_noyank"

[keys.select]
j = "flip_selections" # "juxtapose"
del = "delete_selection_noyank"

[keys.normal.space]
# shortcuts for quitting
q = ":quit-all"
Q = ":quit-all!"
x = ":write-quit-all"
# space-k is risky. forgetting space executes macro.
t = "hover"
k = "no_op"
# These are usually the same. But when the current directory is not the
# same as the git repository, I want the default to be inverted. By default,
# open the file picker in the current directory, because I probably set that
# intentionally.
f = "file_picker_in_current_directory"
F = "file_picker"
# same inversion of default of file explorer as file picker (not yet on stable helix)
# e = "file_explorer_in_current_buffer_directory"
# E = "file_explorer"

[keys.normal.space.w]
h = "hsplit"              # "save" -> "history"
p = "rotate_view_reverse" # counterpart of <space>ww

[keys.insert]
C-h = "commit_undo_checkpoint" # "save" -> "history"

# dollar-store blame UI
[keys.normal."["]
"r" = [ # "previous revision", checks out the commit just before the current line was last edited
  ":write-all", # prevent other buffer content from being lost, jj command will snapshot it
  # need append-output to block until command is complete
  ":append-output jj new %sh{jj file annotate %{buffer_name} -T 'if(line_number == %{cursor_line}, commit.change_id())'}- &> /dev/null",
  ":reload-all",
]

#### "save" -> "history"
# remapping currently not supported, don't care anyway
# [keys.picker]
# C-h = "Open horizontally"
# [keys.prompt]
# C-h = "Insert word under doc cursor, ..."
